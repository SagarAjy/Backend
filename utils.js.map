{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\r\nimport { differenceInCalendarDays, parse, format } from 'date-fns';\r\nimport { collectionModel } from './server/collection/collection.model';\r\nimport { Prisma } from '@prisma/client';\r\n\r\n// encryption of data\r\nconst secretKey = Buffer.from(process.env.AES_SECRET_KEY || '', 'hex');\r\n\r\ntype EncryptedData = {\r\n  iv: string;\r\n  encryptedData: string;\r\n  authTag: string;\r\n};\r\n\r\n// * function to generate random otp\r\nexport const generateOTP = () => {\r\n  return Math.floor(1000 + Math.random() * 9000);\r\n};\r\n\r\nexport const formatIndianNumber = (number: number) => {\r\n  // Convert the number to a string for easier manipulation\r\n  const numStr = number.toFixed(1).toString();\r\n\r\n  // Split the number into integer and decimal parts\r\n  const [integerPart, decimalPart] = numStr.split('.');\r\n\r\n  // Format the integer part with commas\r\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n\r\n  // Combine the formatted integer and decimal parts\r\n  const formattedNumber = decimalPart\r\n    ? `${formattedInteger}.${decimalPart}`\r\n    : formattedInteger;\r\n\r\n  return '₹' + formattedNumber + '/-';\r\n};\r\n\r\nexport const convertToIndianWords = (number: number) => {\r\n  const units = [\r\n    '',\r\n    'One',\r\n    'Two',\r\n    'Three',\r\n    'Four',\r\n    'Five',\r\n    'Six',\r\n    'Seven',\r\n    'Eight',\r\n    'Nine',\r\n  ];\r\n\r\n  const teens = [\r\n    '',\r\n    'Eleven',\r\n    'Twelve',\r\n    'Thirteen',\r\n    'Fourteen',\r\n    'Fifteen',\r\n    'Sixteen',\r\n    'Seventeen',\r\n    'Eighteen',\r\n    'Nineteen',\r\n  ];\r\n\r\n  const tens = [\r\n    '',\r\n    'Ten',\r\n    'Twenty',\r\n    'Thirty',\r\n    'Forty',\r\n    'Fifty',\r\n    'Sixty',\r\n    'Seventy',\r\n    'Eighty',\r\n    'Ninety',\r\n  ];\r\n\r\n  const convertChunk = (num: number) => {\r\n    let words = '';\r\n\r\n    if (num >= 100) {\r\n      words += units[Math.floor(num / 100)] + ' Hundred ';\r\n      num %= 100;\r\n    }\r\n\r\n    if (num >= 11 && num <= 19) {\r\n      words += teens[num - 10] + ' ';\r\n    } else if (num === 10 || num >= 20) {\r\n      words += tens[Math.floor(num / 10)] + ' ';\r\n      num %= 10;\r\n    }\r\n\r\n    if (num >= 1 && num <= 9) {\r\n      words += units[num] + ' ';\r\n    }\r\n\r\n    return words;\r\n  };\r\n\r\n  if (number === 0) {\r\n    return 'Zero';\r\n  }\r\n\r\n  let words = '';\r\n\r\n  if (number >= 1e9) {\r\n    words += convertChunk(Math.floor(number / 1e9)) + 'Billion ';\r\n    number %= 1e9;\r\n  }\r\n\r\n  if (number >= 1e7) {\r\n    words += convertChunk(Math.floor(number / 1e7)) + 'Crore ';\r\n    number %= 1e7;\r\n  }\r\n\r\n  if (number >= 1e5) {\r\n    words += convertChunk(Math.floor(number / 1e5)) + 'Lakh ';\r\n    number %= 1e5;\r\n  }\r\n\r\n  if (number >= 1e3) {\r\n    words += convertChunk(Math.floor(number / 1e3)) + 'Thousand ';\r\n    number %= 1e3;\r\n  }\r\n\r\n  words += convertChunk(number);\r\n\r\n  return words.trim();\r\n};\r\n\r\nexport const processInBatch = async <T, R>(\r\n  items: T[],\r\n  processFunc: (item: T) => Promise<R>,\r\n  BATCH_SIZE: number,\r\n): Promise<R[]> => {\r\n  let results: R[] = [];\r\n  for (let i = 0; i < items.length; i += BATCH_SIZE) {\r\n    const batch = items.slice(i, i + BATCH_SIZE);\r\n    const batchResults = await Promise.all(batch.map(processFunc));\r\n    results = results.concat(batchResults);\r\n  }\r\n  return results;\r\n};\r\n\r\nexport const encrypt = (text: string) => {\r\n  const iv = crypto.randomBytes(16);\r\n  const cipher = crypto.createCipheriv('aes-256-gcm', secretKey, iv);\r\n  let encrypted = cipher.update(text, 'utf8', 'hex');\r\n  encrypted += cipher.final('hex');\r\n  const tag = cipher.getAuthTag();\r\n  return {\r\n    iv: iv.toString('hex'),\r\n    encryptedData: encrypted,\r\n    authTag: tag.toString('hex'),\r\n  };\r\n};\r\n\r\nexport const decrypt = (hash: EncryptedData) => {\r\n  const decipher = crypto.createDecipheriv(\r\n    'aes-256-gcm',\r\n    secretKey,\r\n    Buffer.from(hash.iv, 'hex'),\r\n  );\r\n  decipher.setAuthTag(Buffer.from(hash.authTag, 'hex'));\r\n  let decrypted = decipher.update(hash.encryptedData, 'hex', 'utf8');\r\n  decrypted += decipher.final('utf8');\r\n  return decrypted;\r\n};\r\n\r\nexport const getCurrentRepayAmount = ({\r\n  principal,\r\n  tenure,\r\n  roi,\r\n  penaltyRoi,\r\n  amtApproved,\r\n  disbursalDate,\r\n  repaymentDate,\r\n  currentDate,\r\n  collections,\r\n\r\n}: {\r\n\r\n  principal: number;\r\n  tenure: number;\r\n  roi: number;\r\n  penaltyRoi: number;\r\n  amtApproved: number;\r\n  disbursalDate: Date;\r\n  repaymentDate: Date;\r\n  currentDate: Date;\r\n  collections: Prisma.PromiseReturnType<typeof collectionModel.getCollections>;\r\n}) => {\r\n  let currentRepayAmount = 0;\r\n\r\n  let newPrincipal = amtApproved;\r\n  let prevInterestDate = disbursalDate; // start from the disbursal date\r\n  let repayDate = repaymentDate;\r\n\r\n  //total values\r\n\r\n  let totalInterest = 0;\r\n  let penaltyInterest = 0;\r\n  let penaltyDays = 0;\r\n\r\n  if (collections.length === 0) {\r\n    // if today date less than equal to repay date then no penalty etc\r\n    if (currentDate <= repayDate) {\r\n      const tempTenure = differenceInCalendarDays(new Date(), prevInterestDate);\r\n      totalInterest = principal * roi * tempTenure * 0.01;\r\n    }\r\n    // if today date greater than repay date then normal interest till repay date then penalty interest\r\n    // till today date\r\n    else if (currentDate > repayDate) {\r\n      const tempTenure = differenceInCalendarDays(repayDate, prevInterestDate);\r\n      totalInterest = principal * roi * tempTenure * 0.01;\r\n      penaltyDays = differenceInCalendarDays(currentDate, repayDate);\r\n      penaltyInterest = principal * penaltyRoi * penaltyDays * 0.01;\r\n    }\r\n    currentRepayAmount = principal + totalInterest + penaltyInterest;\r\n  } else if (collections.length > 0) {\r\n    // today date less than or equal to repay date then\r\n    // we map all collections and calculate interest till collection date\r\n    // then add this interest to total interest and subtract collected amount from principal + interest\r\n\r\n    // check if first collection date is before repay date\r\n    const firstCollection = collections[collections.length - 1];\r\n\r\n    // format date to dd-MM-yyyy then back to collected date to fix timezone issue\r\n    const firstCollectionDate = firstCollection.collected_date;\r\n\r\n    // if first collection date is after repay date then everything before\r\n    // is just total interest over the tenure\r\n    if (firstCollectionDate > repayDate) {\r\n      totalInterest = newPrincipal * roi * tenure * 0.01;\r\n      prevInterestDate = repayDate;\r\n\r\n      for (let i = collections.length - 1; i >= 0; i--) {\r\n        const collection = collections[i];\r\n\r\n        const collectionDate = collection.collected_date;\r\n\r\n        //no. of days till this collection made\r\n        let penaltyDaysTillCollection = differenceInCalendarDays(\r\n          collectionDate,\r\n          prevInterestDate,\r\n        );\r\n\r\n        //calculate penalty interest till this collection made\r\n        let penaltyInterestTillCollection =\r\n          newPrincipal * penaltyRoi * penaltyDaysTillCollection * 0.01;\r\n\r\n        let amountToDistribute = collection.collected_amount;\r\n\r\n        // First, reduce penalty interest\r\n        if (amountToDistribute > penaltyInterestTillCollection) {\r\n          amountToDistribute -= penaltyInterestTillCollection;\r\n          penaltyInterestTillCollection = 0;\r\n        } else {\r\n          penaltyInterestTillCollection -= amountToDistribute;\r\n          amountToDistribute = 0;\r\n        }\r\n\r\n        // Next, reduce regular interest\r\n        if (amountToDistribute > totalInterest) {\r\n          amountToDistribute -= totalInterest;\r\n          totalInterest = 0;\r\n        } else {\r\n          totalInterest -= amountToDistribute;\r\n          amountToDistribute = 0;\r\n        }\r\n\r\n        // Finally, reduce principal with any remaining amount\r\n        newPrincipal -= amountToDistribute;\r\n        penaltyDays = penaltyDays + penaltyDaysTillCollection;\r\n        penaltyInterest = penaltyInterest + penaltyInterestTillCollection;\r\n\r\n        prevInterestDate = collectionDate;\r\n      }\r\n    } else if (firstCollectionDate <= repayDate) {\r\n      for (let i = collections.length - 1; i >= 0; i--) {\r\n        const collection = collections[i];\r\n\r\n        const collectionDate = collection.collected_date;\r\n\r\n        let penaltyDaysTillCollection = 0;\r\n        let penaltyInterestTillCollection = 0;\r\n\r\n        // if collection date is before repay date then calculate interest\r\n        if (collectionDate <= repayDate) {\r\n          let daysTillCollection = differenceInCalendarDays(\r\n            collectionDate,\r\n            prevInterestDate,\r\n          );\r\n\r\n          // calculate interest for this tenure\r\n          let interestTillCollection =\r\n            newPrincipal * roi * daysTillCollection * 0.01;\r\n\r\n          // subtract this interest from collection amount\r\n          let amountToDistribute = collection.collected_amount;\r\n\r\n          if (amountToDistribute > interestTillCollection) {\r\n            amountToDistribute -= interestTillCollection;\r\n            interestTillCollection = 0;\r\n          } else {\r\n            interestTillCollection -= amountToDistribute;\r\n            amountToDistribute = 0;\r\n          }\r\n\r\n          // subtract remaining collection amount from principal\r\n          newPrincipal -= amountToDistribute;\r\n\r\n          totalInterest = totalInterest + interestTillCollection;\r\n        }\r\n\r\n        // if collection date is after repay date then calculate penalty interest\r\n        if (collectionDate > repayDate) {\r\n          penaltyDaysTillCollection = differenceInCalendarDays(\r\n            collectionDate,\r\n            prevInterestDate,\r\n          );\r\n\r\n          penaltyInterestTillCollection =\r\n            newPrincipal * penaltyRoi * penaltyDaysTillCollection * 0.01;\r\n\r\n          let amountToDistribute = collection.collected_amount;\r\n\r\n          // First, reduce penalty interest\r\n          if (amountToDistribute > penaltyInterestTillCollection) {\r\n            amountToDistribute -= penaltyInterestTillCollection;\r\n            penaltyInterestTillCollection = 0;\r\n          } else {\r\n            penaltyInterestTillCollection -= amountToDistribute;\r\n            amountToDistribute = 0;\r\n          }\r\n\r\n          // Next, reduce regular interest\r\n          if (amountToDistribute > totalInterest) {\r\n            amountToDistribute -= totalInterest;\r\n            totalInterest = 0;\r\n          } else {\r\n            totalInterest -= amountToDistribute;\r\n            amountToDistribute = 0;\r\n          }\r\n\r\n          // Finally, reduce principal with any remaining amount\r\n          newPrincipal -= amountToDistribute;\r\n          penaltyDays = penaltyDays + penaltyDaysTillCollection;\r\n          penaltyInterest = penaltyInterest + penaltyInterestTillCollection;\r\n\r\n          prevInterestDate = collectionDate;\r\n        }\r\n      }\r\n\r\n      if (prevInterestDate < repayDate) {\r\n        let daysTillRepay = differenceInCalendarDays(\r\n          repayDate,\r\n          prevInterestDate,\r\n        );\r\n\r\n        let interestTillRepay = newPrincipal * roi * daysTillRepay * 0.01;\r\n        totalInterest = totalInterest + interestTillRepay;\r\n        prevInterestDate = repayDate;\r\n      }\r\n\r\n      if (currentDate > repayDate) {\r\n        penaltyDays = differenceInCalendarDays(currentDate, repayDate);\r\n        penaltyInterest = newPrincipal * penaltyRoi * penaltyDays * 0.01;\r\n      }\r\n    }\r\n\r\n    currentRepayAmount = newPrincipal + totalInterest + penaltyInterest;\r\n  }\r\n\r\n  return {\r\n    totalInterest,\r\n    currentRepayAmount,\r\n    penaltyInterest,\r\n    penaltyDays,\r\n  };\r\n};\r\n\r\nexport const getDueDate = (\r\n  startDate: string | Date,\r\n  tenure: number,\r\n): Date | null => {\r\n  if (!startDate) return null;\r\n\r\n  const parsedDate =\r\n    typeof startDate === 'string' ? parse(startDate, 'dd-MM-yyyy', new Date()) : startDate;\r\n\r\n  return new Date(parsedDate.getTime() + tenure * 24 * 60 * 60 * 1000);\r\n};\r\n\r\nexport const formatDate = (date: Date | string): string => {\r\n  const parsedDate =\r\n    typeof date === 'string' ? parse(date, 'yyyy-MM-dd', new Date()) : date;\r\n  return format(parsedDate, 'dd-MM-yyyy');\r\n};\r\nexport const generateTicketID = (randnum: string) => {\r\n  return \"\";\r\n}\r\n"]}
